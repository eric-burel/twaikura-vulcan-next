module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isClientRender=t.isStaticExportCtx=t.isServerRenderCtx=void 0,t.isServerRenderCtx=e=>!!(e&&e.res&&e.res.writeHead),t.isStaticExportCtx=e=>!(!e||!e.res||e.res.writeHead),t.isClientRender=()=>!0},function(e,t){e.exports=require("react")},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),i(r(0),t),i(r(3),t)},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t},u=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function u(e){try{c(n.next(e))}catch(e){o(e)}}function s(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(u,s)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.withPrivateAccess=t.redirectServer=void 0;const c=s(r(1)),d=o(r(4)),a=r(0),l=s(r(5)),f=r(1),p=l.default("vns:next"),v=s(r(6));t.redirectServer=e=>t=>{e.res.writeHead(302,{Location:t}),e.res.end()};const g={defaultRedirection:"/",LoaderComponent:()=>c.default.createElement(c.default.Fragment,null),isAllowedClient:()=>u(void 0,void 0,void 0,(function*(){return{isAllowed:!1}})),isAllowedServer:()=>u(void 0,void 0,void 0,(function*(){return{isAllowed:!1}}))};t.withPrivateAccess=e=>(r,n)=>{const i=v.default({},g,e||{},n||{}),{isAllowedClient:o,isAllowedServer:s,defaultRedirection:l,LoaderComponent:b}=i,h=e=>{const t=d.useRouter(),[n,i]=f.useState(!1),{isAllowedDuringSSR:s}=e;f.useEffect(()=>{u(void 0,void 0,void 0,(function*(){const{isAllowed:r,redirection:n}=yield o(e);r?i(!0):(p("Redirecting client-side"),t.push(n||l))}))},[t,e]);const{isStaticExport:v}=e;return v&&!a.isClientRender()?(p("We render nothing during static export, server side this is a private page (only rendered client side)"),c.default.createElement(c.default.Fragment,null)):!a.isClientRender()||s||n?(p("Rendering private page"),c.default.createElement(c.default.Fragment,null,c.default.createElement(r,Object.assign({},e)))):(p("We render nothing if user is not allowed or a redirect is happening or we simply wait for the effect to run"),c.default.createElement(b,null))},y=h.getInitialProps;return h.getInitialProps=e=>u(void 0,void 0,void 0,(function*(){p("Running private page getInitialProps");const r=y?y(e):{};if(a.isServerRenderCtx(e)){p("Detected dynamic server-side rendering");const{redirection:n,isAllowed:i,authProps:o={}}=yield s(r,e);if(i)return Object.assign(Object.assign(Object.assign({},r),o),{redirection:n,isServerRender:!0,isStaticExport:!1});p("Redirecting (dynamic server render)"),t.redirectServer(e)(n||l)}else{if(a.isStaticExportCtx(e))return p("Detected static export"),Object.assign(Object.assign({},r),{isStaticExport:!0,isServerRender:!1});if(a.isClientRender()){p("Detected client render");const{isAllowed:t,redirection:n,authProps:i={}}=yield o(r,e);return t||(p("Redirecting (client-side, during getInitialProps call)"),d.default.push(n||l)),Object.assign(Object.assign({},r),i)}}return r})),h}},function(e,t){e.exports=require("next/router")},function(e,t){e.exports=require("debug")},function(e,t){e.exports=require("lodash/merge")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3NyLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0XCIiLCJ3ZWJwYWNrOi8vLy4vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcm91dGluZy50c3giLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibmV4dC9yb3V0ZXJcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJkZWJ1Z1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcImxvZGFzaC9tZXJnZVwiIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaXNTZXJ2ZXJSZW5kZXJDdHgiLCJjdHgiLCJyZXMiLCJ3cml0ZUhlYWQiLCJpc1N0YXRpY0V4cG9ydEN0eCIsImlzQ2xpZW50UmVuZGVyIiwicmVxdWlyZSIsImRlYnVnTmV4dCIsInJlZGlyZWN0U2VydmVyIiwicGF0aG5hbWUiLCJMb2NhdGlvbiIsImVuZCIsImRlZmF1bHRPcHRpb25zIiwiZGVmYXVsdFJlZGlyZWN0aW9uIiwiTG9hZGVyQ29tcG9uZW50IiwiaXNBbGxvd2VkQ2xpZW50IiwiaXNBbGxvd2VkIiwiaXNBbGxvd2VkU2VydmVyIiwid2l0aFByaXZhdGVBY2Nlc3MiLCJob2NPcHRpb25zIiwiUGFnZSIsInBhZ2VPcHRpb25zIiwib3B0aW9ucyIsIlByaXZhdGVQYWdlIiwicHJvcHMiLCJyb3V0ZXIiLCJ1c2VSb3V0ZXIiLCJpc0FsbG93ZWRTdGF0ZSIsInNldEFsbG93ZWRTdGF0ZSIsInVzZVN0YXRlIiwiaXNBbGxvd2VkRHVyaW5nU1NSIiwidXNlRWZmZWN0IiwicmVkaXJlY3Rpb24iLCJwdXNoIiwiaXNTdGF0aWNFeHBvcnQiLCJwYWdlR2V0SW5pdGlhbFByb3BzIiwiZ2V0SW5pdGlhbFByb3BzIiwicGFnZUluaXRpYWxQcm9wcyIsImF1dGhQcm9wcyIsImlzU2VydmVyUmVuZGVyIl0sIm1hcHBpbmdzIjoiMkJBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBMERmLE9BckRBRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVB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RixHQUFLZSxFQUlILG9EQUNLcUIsR0FDQUMsR0FBUyxDQUNaTixjQUNBTyxnQkFBZ0IsRUFDaEJMLGdCQUFnQixJQVJsQjNCLEVBQVUsdUNBQ1YsRUFBQUMsZUFBZVAsRUFBZixDQUFvQitCLEdBQWVuQixPQVVoQyxJQUFJLEVBQUFULGtCQUFrQkgsR0FFM0IsT0FEQU0sRUFBVSwwQkFDViwrQkFDSzhCLEdBQWdCLENBQ25CSCxnQkFBZ0IsRUFDaEJLLGdCQUFnQixJQUdiLEdBQUksRUFBQWxDLGlCQUFrQixDQUMzQkUsRUFBVSwwQkFDVixNQUFNLFVBQUVTLEVBQUYsWUFBYWdCLEVBQWIsVUFBMEJNLEVBQVksVUFBYXZCLEVBQ3ZEc0IsRUFDQXBDLEdBTUYsT0FKS2UsSUFDSFQsRUFBVSwwREFDVixVQUFPMEIsS0FBS0QsR0FBZW5CLElBRTdCLCtCQUFZd0IsR0FBcUJDLElBR25DLE9BQU9ELEtBR0ZkLEksY0M1TFR4RCxFQUFPRCxRQUFVd0MsUUFBUSxnQixjQ0F6QnZDLEVBQU9ELFFBQVV3QyxRQUFRLFUsY0NBekJ2QyxFQUFPRCxRQUFVd0MsUUFBUSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsImltcG9ydCB7IE5leHRQYWdlQ29udGV4dCB9IGZyb20gXCJuZXh0XCI7XG5cbmV4cG9ydCBjb25zdCBpc1NlcnZlclJlbmRlckN0eCA9IChjdHg/OiBOZXh0UGFnZUNvbnRleHQpID0+XG4gICEhKGN0eCAmJiBjdHgucmVzICYmIGN0eC5yZXMud3JpdGVIZWFkKTtcblxuZXhwb3J0IGNvbnN0IGlzU3RhdGljRXhwb3J0Q3R4ID0gKGN0eD86IE5leHRQYWdlQ29udGV4dCkgPT5cbiAgISEoY3R4ICYmIGN0eC5yZXMgJiYgIWN0eC5yZXMud3JpdGVIZWFkKTtcblxuZXhwb3J0IGNvbnN0IGlzQ2xpZW50UmVuZGVyID0gKCkgPT4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpOyIsImV4cG9ydCAqIGZyb20gXCIuL3NzclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcm91dGluZ1wiO1xuIiwiLyoqXG4gKiBEZW1vIGEgcHJpdmF0ZSBwYWdlXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vVnVsY2FuSlMvdnVsY2FuLW5leHQtc3RhcnRlci9pc3N1ZXMvNDlcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2Rpc2N1c3Npb25zLzE0NTMxXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IE5leHRQYWdlLCBOZXh0UGFnZUNvbnRleHQgfSBmcm9tIFwibmV4dFwiO1xuaW1wb3J0IFJvdXRlciwgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcbmltcG9ydCB7IGlzU2VydmVyUmVuZGVyQ3R4LCBpc0NsaWVudFJlbmRlciwgaXNTdGF0aWNFeHBvcnRDdHggfSBmcm9tIFwiLi9zc3JcIjtcbmltcG9ydCBkZWJ1ZyBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmNvbnN0IGRlYnVnTmV4dCA9IGRlYnVnKFwidm5zOm5leHRcIik7XG5pbXBvcnQgX21lcmdlIGZyb20gXCJsb2Rhc2gvbWVyZ2VcIjtcblxuLy8gQHNzci1vbmx5XG5leHBvcnQgY29uc3QgcmVkaXJlY3RTZXJ2ZXIgPSAoY3R4OiBOZXh0UGFnZUNvbnRleHQpID0+IChwYXRobmFtZTogc3RyaW5nKSA9PiB7XG4gIGN0eC5yZXMud3JpdGVIZWFkKDMwMiwgeyBMb2NhdGlvbjogcGF0aG5hbWUgfSk7XG4gIGN0eC5yZXMuZW5kKCk7XG59O1xuXG5pbnRlcmZhY2UgUmVkaXJlY3RSZXN1bHQge1xuICBhdXRoUHJvcHM/OiBPYmplY3Q7XG4gIHJlZGlyZWN0aW9uPzogc3RyaW5nO1xuICBpc0FsbG93ZWQ6IGJvb2xlYW47XG59XG5pbnRlcmZhY2UgUHJpdmF0ZUFjY2Vzc09wdGlvbnMge1xuICBkZWZhdWx0UmVkaXJlY3Rpb24/OiBzdHJpbmc7XG4gIGlzQWxsb3dlZFNlcnZlcjogKFxuICAgIHBhZ2VQcm9wczogYW55LFxuICAgIGN0eDogTmV4dFBhZ2VDb250ZXh0XG4gICkgPT4gUHJvbWlzZTxSZWRpcmVjdFJlc3VsdD47IC8vIHJldHVybiBmYWxzZSBpZiB0aGUgdXNlciBpcyBhbGxvd2VkXG4gIGlzQWxsb3dlZENsaWVudDogKFxuICAgIHByb3BzOiBhbnksXG4gICAgY3R4PzogTmV4dFBhZ2VDb250ZXh0XG4gICkgPT4gUHJvbWlzZTxSZWRpcmVjdFJlc3VsdD47IC8vIHJldHVybiBmYWxzZSBpZiB0aGUgdXNlciBpcyBub3QgYWxsb3dlZFxuICBMb2FkZXJDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU7IC8vIFdpbGwgYmUgcmVuZGVyZWQgZHVyaW5nIHRoZSBjbGllbnQgY2hlY2suIEl0J3MgYWR2aXNlZCBub3QgdG8gdXNlIHRoaXMsIHlvdSByaXNrIHRvIGhhdmUgc29tZSBhbm5veWluZyBmbGFzaFxufVxuXG4vLyByZWxldmFudCBkZWZhdWx0cyBzbyB5b3UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNob3cgYSBwcml2YXRlIHBhZ2VcbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBQcml2YXRlQWNjZXNzT3B0aW9ucyA9IHtcbiAgZGVmYXVsdFJlZGlyZWN0aW9uOiBcIi9cIixcbiAgTG9hZGVyQ29tcG9uZW50OiAoKSA9PiA8PjwvPixcbiAgaXNBbGxvd2VkQ2xpZW50OiBhc3luYyAoKSA9PiAoe1xuICAgIGlzQWxsb3dlZDogZmFsc2UsXG4gIH0pLFxuICBpc0FsbG93ZWRTZXJ2ZXI6IGFzeW5jICgpID0+ICh7XG4gICAgaXNBbGxvd2VkOiBmYWxzZSxcbiAgfSksXG59O1xuaW50ZXJmYWNlIFByaXZhdGVQYWdlUHJvcHMge1xuICBpc1N0YXRpY0V4cG9ydD86IGJvb2xlYW47XG4gIGlzU2VydmVyUmVuZGVyPzogYm9vbGVhbjtcbiAgaXNBbGxvd2VkRHVyaW5nU1NSPzogYm9vbGVhbjtcbn1cbi8qKlxuICogTWFrZXMgYSBwYWdlIHByaXZhdGUuXG4gKlxuICogWW91IGNhbiBwYXNzIGRlZmF1bHQgb3B0aW9ucyBvciBwYWdlIG9wdGlvbnMsIHRoZXkgd2lsbCBiZSBtZXJnZWQgYXV0b21hdGljYWxseS5cbiAqIEZvciBleGFtcGxlOlxuICogY29uc3QgY3VzdG9tV2l0aFByaXZhdGVBY2Nlc3MgPSB3aXRoUHJpdmF0ZUFjY2VzcyhteURlZmF1bHRPcHRpb25zKSAvLyByZXVzZSBmb3IgYWxsIHlvdXIgcGFnZXNcbiAqIC4uLlxuICogZXhwb3J0IGRlZmF1bHQgY3VzdG9tV2l0aFByaXZhdGVBY2Nlc3MoTXlQcml2YXRlUGFnZSwgbXlQYWdlU3BlY2lmaWNPcHRpb25zKVxuICpcbiAqIG9yIHNpbXBseVxuICpcbiAqIGV4cG9ydCBkZWZhdWx0IE15UHJpdmF0ZVBhZ2UgPSB3aXRoUHJpdmF0ZUFjY2VzcygpKE15UGFnZSwgbXlQYWdlU3BlY2lmaWNPcHRpb25zKVxuICpcbiAqIFRPRE86IHVwZGF0ZSBvbiBWdWxjYW4gQWNjZXNzQ29udHJvbCBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IHdpdGhQcml2YXRlQWNjZXNzID0gKFxuICBob2NPcHRpb25zPzogUGFydGlhbDxQcml2YXRlQWNjZXNzT3B0aW9ucz5cbikgPT4gKFBhZ2U6IE5leHRQYWdlLCBwYWdlT3B0aW9ucz86IFBhcnRpYWw8UHJpdmF0ZUFjY2Vzc09wdGlvbnM+KSA9PiB7XG4gIGNvbnN0IG9wdGlvbnM6IFByaXZhdGVBY2Nlc3NPcHRpb25zID0gX21lcmdlKFxuICAgIHt9LFxuICAgIGRlZmF1bHRPcHRpb25zLFxuICAgIGhvY09wdGlvbnMgfHwge30sXG4gICAgcGFnZU9wdGlvbnMgfHwge31cbiAgKTtcbiAgY29uc3Qge1xuICAgIGlzQWxsb3dlZENsaWVudCxcbiAgICBpc0FsbG93ZWRTZXJ2ZXIsXG4gICAgZGVmYXVsdFJlZGlyZWN0aW9uLFxuICAgIExvYWRlckNvbXBvbmVudCxcbiAgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgUHJpdmF0ZVBhZ2U6IE5leHRQYWdlPFByaXZhdGVQYWdlUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gICAgLy8gU0NFTkFSSU8gMTogaGFuZGxlIHJlZGlyZWN0aW9uIGFuZCByZW5kZXJpbmcgcHVyZWx5IGNsaWVudC1zaWRlLCBhZnRlciBzdGF0aWMgZXhwb3J0IG9yIGR1cmluZyBhIGNsaWVudC1zaWRlIHJlZGlyZWN0XG4gICAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgY29uc3QgW2lzQWxsb3dlZFN0YXRlLCBzZXRBbGxvd2VkU3RhdGVdID0gdXNlU3RhdGUoZmFsc2UpOyAvLyB1c2Ugc3RhdGUgdG8gYXZvaWQgdGhlIGZsYXNoXG4gICAgY29uc3QgeyBpc0FsbG93ZWREdXJpbmdTU1IgfSA9IHByb3BzO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBjb25zdCBjaGVja0FjY2VzcyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBpc0FsbG93ZWQsIHJlZGlyZWN0aW9uIH0gPSBhd2FpdCBpc0FsbG93ZWRDbGllbnQocHJvcHMpO1xuICAgICAgICBpZiAoIWlzQWxsb3dlZCkge1xuICAgICAgICAgIGRlYnVnTmV4dChcIlJlZGlyZWN0aW5nIGNsaWVudC1zaWRlXCIpO1xuICAgICAgICAgIHJvdXRlci5wdXNoKHJlZGlyZWN0aW9uIHx8IGRlZmF1bHRSZWRpcmVjdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0QWxsb3dlZFN0YXRlKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hlY2tBY2Nlc3MoKTtcbiAgICB9LCBbcm91dGVyLCBwcm9wc10pO1xuICAgIC8vIFNDRU5BUklPIDEuMTogc3RhdGljIGV4cG9ydCAocmVuZGVyaW5nIHNlcnZlciBzaWRlIGF0IGJ1aWxkIHRpbWUpXG4gICAgY29uc3QgeyBpc1N0YXRpY0V4cG9ydCB9ID0gcHJvcHM7XG4gICAgaWYgKGlzU3RhdGljRXhwb3J0ICYmICFpc0NsaWVudFJlbmRlcigpKSB7XG4gICAgICBkZWJ1Z05leHQoXG4gICAgICAgIFwiV2UgcmVuZGVyIG5vdGhpbmcgZHVyaW5nIHN0YXRpYyBleHBvcnQsIHNlcnZlciBzaWRlIHRoaXMgaXMgYSBwcml2YXRlIHBhZ2UgKG9ubHkgcmVuZGVyZWQgY2xpZW50IHNpZGUpXCJcbiAgICAgICk7XG4gICAgICByZXR1cm4gPD48Lz47XG4gICAgICAvLyBTQ05FQVJJTyAxLjI6IGNsaWVudCByZW5kZXJcbiAgICAgIC8vIFNDRU5BUklPIDEuMi4xIDogY2xpZW50IHJlbmRlciBhZnRlciBhIHNlcnZlciByZW5kZXIgKHdlIGtub3cgaWYgdXNlciBpcyBhbGxvd2VkIHRoYW5rcyB0byBpbml0aWFsUHJvcHMpXG4gICAgICAvLyBhbmQgMS4yLjI6IGNsaWVudCByZW5kZXIgYWZ0ZXIgYSBjbGllbnQgcmVkaXJlY3QgKHdlIG11c3Qgd2FpdCBmb3IgdGhlIHVzZUVmZmVjdCB0byBydW4pXG4gICAgfSBlbHNlIGlmIChpc0NsaWVudFJlbmRlcigpICYmICEoaXNBbGxvd2VkRHVyaW5nU1NSIHx8IGlzQWxsb3dlZFN0YXRlKSkge1xuICAgICAgZGVidWdOZXh0KFxuICAgICAgICBcIldlIHJlbmRlciBub3RoaW5nIGlmIHVzZXIgaXMgbm90IGFsbG93ZWQgb3IgYSByZWRpcmVjdCBpcyBoYXBwZW5pbmcgb3Igd2Ugc2ltcGx5IHdhaXQgZm9yIHRoZSBlZmZlY3QgdG8gcnVuXCJcbiAgICAgICk7XG4gICAgICAvLyB3ZSByZW5kZXIgbm90aGluZyB3aGVuIHdhaXRpbmcgZm9yIGEgcmVkaXJlY3Qgb3IgdG8gY2hlY2sgdGhhdCB3ZSBhcmUgYWxsb3dlZCBvciBub3QgYmVpbmcgYXV0aCAoYXZvaWRzIGEgZmxhc2gpXG4gICAgICByZXR1cm4gPExvYWRlckNvbXBvbmVudCAvPjtcbiAgICB9XG4gICAgZGVidWdOZXh0KFwiUmVuZGVyaW5nIHByaXZhdGUgcGFnZVwiKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8UGFnZSB7Li4ucHJvcHN9IC8+XG4gICAgICA8Lz5cbiAgICApO1xuICB9O1xuXG4gIC8vIEluaXRpYWwgUHJvcHNcblxuICBjb25zdCBwYWdlR2V0SW5pdGlhbFByb3BzID0gUHJpdmF0ZVBhZ2UuZ2V0SW5pdGlhbFByb3BzO1xuICAvKipcbiAgICogQXQgdGhlIHRpbWUgb2Ygd3JpdGluZywgdXNpbmcgZ2V0U2VydmVyU2lkZVByb3BzIHdvdWxkIGJlIGNsZWFuZXIsIGJ1dCB3b3VsZCBkaXNhYmxlXG4gICAqIHN0YXRpYyBleHBvcnQuXG4gICAqIEluc3RlYWQgd2UgdXNlIGdldEluaXRpYWxQcm9wcywgYW5kIHRyZWF0IFNTUiBhcyBzcGVjaWFsIGNhc2VcbiAgICpcbiAgICovXG4gIFByaXZhdGVQYWdlLmdldEluaXRpYWxQcm9wcyA9IGFzeW5jIChjdHg/OiBOZXh0UGFnZUNvbnRleHQpID0+IHtcbiAgICBkZWJ1Z05leHQoXCJSdW5uaW5nIHByaXZhdGUgcGFnZSBnZXRJbml0aWFsUHJvcHNcIik7XG4gICAgY29uc3QgcGFnZUluaXRpYWxQcm9wcyA9IHBhZ2VHZXRJbml0aWFsUHJvcHNcbiAgICAgID8gcGFnZUdldEluaXRpYWxQcm9wcyhjdHgpXG4gICAgICA6IHt9OyAvLyBnZXQgdGhlIHBhZ2UgaW5pdGlhbCBwcm9wcyBpZiBhbnlcblxuICAgIC8vIFNDRU5BUklPIDI6IHdlIGFyZSBkb2luZyBkeW5hbWljIFNTUlxuICAgIC8vIFdlIHJlZGlyZWN0IHVzaW5nIEhUVFBcbiAgICBpZiAoaXNTZXJ2ZXJSZW5kZXJDdHgoY3R4KSkge1xuICAgICAgZGVidWdOZXh0KFwiRGV0ZWN0ZWQgZHluYW1pYyBzZXJ2ZXItc2lkZSByZW5kZXJpbmdcIik7XG4gICAgICBjb25zdCB7IHJlZGlyZWN0aW9uLCBpc0FsbG93ZWQsIGF1dGhQcm9wcyA9IHt9IH0gPSBhd2FpdCBpc0FsbG93ZWRTZXJ2ZXIoXG4gICAgICAgIHBhZ2VJbml0aWFsUHJvcHMsXG4gICAgICAgIGN0eFxuICAgICAgKTtcbiAgICAgIGlmICghaXNBbGxvd2VkKSB7XG4gICAgICAgIGRlYnVnTmV4dChcIlJlZGlyZWN0aW5nIChkeW5hbWljIHNlcnZlciByZW5kZXIpXCIpO1xuICAgICAgICByZWRpcmVjdFNlcnZlcihjdHgpKHJlZGlyZWN0aW9uIHx8IGRlZmF1bHRSZWRpcmVjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnBhZ2VJbml0aWFsUHJvcHMsXG4gICAgICAgICAgLi4uYXV0aFByb3BzLFxuICAgICAgICAgIHJlZGlyZWN0aW9uLFxuICAgICAgICAgIGlzU2VydmVyUmVuZGVyOiB0cnVlLFxuICAgICAgICAgIGlzU3RhdGljRXhwb3J0OiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzU3RhdGljRXhwb3J0Q3R4KGN0eCkpIHtcbiAgICAgIGRlYnVnTmV4dChcIkRldGVjdGVkIHN0YXRpYyBleHBvcnRcIik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wYWdlSW5pdGlhbFByb3BzLFxuICAgICAgICBpc1N0YXRpY0V4cG9ydDogdHJ1ZSxcbiAgICAgICAgaXNTZXJ2ZXJSZW5kZXI6IGZhbHNlLFxuICAgICAgfTtcbiAgICAgIC8vIFNDRU5BUklPIDM6IGdldEluaXRpYWxQcm9wcyBpcyBjYWxsZWQgYnkgYSBwYWdlIGNoYW5nZSBjbGllbnQgc2lkZSwgd2UgcmVkaXJlY3QgZGlyZWN0bHkgaGVyZSB0byBhdm9pZCBwYWdlIGZsYXNoXG4gICAgfSBlbHNlIGlmIChpc0NsaWVudFJlbmRlcigpKSB7XG4gICAgICBkZWJ1Z05leHQoXCJEZXRlY3RlZCBjbGllbnQgcmVuZGVyXCIpO1xuICAgICAgY29uc3QgeyBpc0FsbG93ZWQsIHJlZGlyZWN0aW9uLCBhdXRoUHJvcHMgPSB7fSB9ID0gYXdhaXQgaXNBbGxvd2VkQ2xpZW50KFxuICAgICAgICBwYWdlSW5pdGlhbFByb3BzLFxuICAgICAgICBjdHhcbiAgICAgICk7XG4gICAgICBpZiAoIWlzQWxsb3dlZCkge1xuICAgICAgICBkZWJ1Z05leHQoXCJSZWRpcmVjdGluZyAoY2xpZW50LXNpZGUsIGR1cmluZyBnZXRJbml0aWFsUHJvcHMgY2FsbClcIik7XG4gICAgICAgIFJvdXRlci5wdXNoKHJlZGlyZWN0aW9uIHx8IGRlZmF1bHRSZWRpcmVjdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4geyAuLi5wYWdlSW5pdGlhbFByb3BzLCAuLi5hdXRoUHJvcHMgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFnZUluaXRpYWxQcm9wcztcbiAgfTtcblxuICByZXR1cm4gUHJpdmF0ZVBhZ2U7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9yb3V0ZXJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZGVidWdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibG9kYXNoL21lcmdlXCIpOyJdLCJzb3VyY2VSb290IjoiIn0=